<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KubeClipper – 文档</title><link>https://www.kubeclipper.io/docs/</link><description>Recent content in 文档 on KubeClipper</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 30 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kubeclipper.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 创建集群</title><link>https://www.kubeclipper.io/docs/tutorials/create-clusters/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/tutorials/create-clusters/</guid><description>
&lt;h2 id="创建集群准备工作">创建集群准备工作&lt;/h2>
&lt;ol>
&lt;li>您需要准备充足的可用节点，如需添加节点，参见“&lt;a href="https://www.kubeclipper.io/docs/tutorials/node-management/#%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9">添加节点&lt;/a>”教程。&lt;/li>
&lt;li>准备好需要部署的 kubernetes、CRI、calico、CSI 和其他插件的镜像或二进制文件，kubeclipper 提供了推荐的版本，您可以根据平台所处网络环境，选择在线 / 离线后，直接在页面上选取使用。您也可以将部署所需的镜像上传至自己的镜像仓库，并在部署时指定。更多安装配置，参考“&lt;a href="#%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE">集群配置&lt;/a>”章节。&lt;/li>
&lt;/ol>
&lt;h2 id="创建单节点实验集群">创建单节点实验集群&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>点击“集群管理”&amp;gt;“集群”，进入集群列表页面，点击左上角“创建集群”按钮。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进入创建集群向导页面的“节点配置”页面。填写“集群名称”，如 “test”，不需选择“集群模版”。选择一个可用节点，添加为控制节点，并在污点管理列表中，将 master 节点的污点移除。点击“下一步”按钮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/aio.png" alt="">&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>进入创建集群向导页面的“集群配置”页面。选择“离线安装”，“镜像仓库”不需填写，其他配置都可使用默认配置，点击“快速创建”按钮，跳转配置确认页面，点击“确认”按钮。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单节点的实验集群创建完成，您可以在集群详情页查看集群详情，也可以点击“查看日志”按钮，查看集群创建过程中的实时日志。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="使用镜像仓库创建集群">使用镜像仓库创建集群&lt;/h2>
&lt;p>如果创建的集群中包含较大的镜像，推荐您将所有镜像上传到特定的镜像仓库，创建集群会更快速更顺畅。&lt;/p>
&lt;ol>
&lt;li>添加镜像仓库。点击“集群管理”&amp;gt;“镜像仓库”，进入镜像仓库列表页面，点击左上角“添加”按钮。在添加镜像仓库的弹窗中输入镜像仓库名称和存放有镜像的仓库地址，点击“确定”按钮。&lt;/li>
&lt;li>创建集群。点击“集群管理”&amp;gt;“集群”，进入集群列表页面，点击左上角“创建集群”按钮。按需配置集群节点，在“集群配置”页面的“镜像仓库”中，选择第一步添加的镜像仓库，根据需要完成集群其他配置后创建集群。&lt;/li>
&lt;/ol>
&lt;h2 id="使用集群模版创建集群">使用集群模版创建集群&lt;/h2>
&lt;p>您可以使用集群模版，简化集群创建流程。&lt;/p>
&lt;ol>
&lt;li>添加模版。保存模版有两种方式，您可以在“集群管理”&amp;gt;“模版管理”页面，添加集群模版，以备创建集群时使用。也可以点击集群操作中的“更多”&amp;gt;“保存为模版”，将已存在的集群配置保存为模版，以便创建出和该集群同等配置的 kubernetes 集群。&lt;/li>
&lt;li>创建集群。点击“集群管理”&amp;gt;“集群”，进入集群列表页面，点击左上角“创建集群”按钮，进入创建集群页面，填写“集群名称”，如 “demo”，选择第一步中保存的集群模版，添加所需节点，点击右下角“快速创建”按钮，跳转至“配置确认”页面，核对模版信息无误后，点击“确认”按钮，创建集群。&lt;/li>
&lt;/ol>
&lt;h2 id="集群配置指南">集群配置指南&lt;/h2>
&lt;h3 id="节点配置">节点配置&lt;/h3>
&lt;p>在节点配置页面，您可以对节点进行以下配置：&lt;/p>
&lt;ul>
&lt;li>区域：集群所属区域，添加节点时可为节点指定物理的或逻辑的区域，使用该区域下节点创建的 kubernetes 集群也属于该区域，不支持使用跨区域的多个节点创建集群。&lt;/li>
&lt;li>控制节点：为集群指定奇数个的控制节点，生产环境一般使用3个控制节点以实现高可用。&lt;/li>
&lt;li>工作节点：根据业务规模，为新集群添加工作节点。&lt;/li>
&lt;li>污点管理：您可以为已添加的节点配置污点，kubeclipper 会自动为控制节点添加不允许调度（noschedule）的污点，您也可以根据需要进行更改。&lt;/li>
&lt;li>节点标签：您可以根据需要为已添加的集群节点配置标签。&lt;/li>
&lt;/ul>
&lt;p>您可以按业务需要配置所需节点。如果需要创建非高可用的实验集群，也可以仅添加一个控制节点，并将控制节点自动添加的污点移除，详细操作参见“&lt;a href="#%E5%88%9B%E5%BB%BA%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%9E%E9%AA%8C%E9%9B%86%E7%BE%A4">创建单节点实验集群&lt;/a>”。&lt;/p>
&lt;h3 id="集群配置">集群配置&lt;/h3>
&lt;p>在集群配置页面，您可以对集群进行以下配置：&lt;/p>
&lt;ul>
&lt;li>安装方式和镜像仓库：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>镜像仓库为空&lt;/th>
&lt;th>指定镜像仓库&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>在线（公网环境）&lt;/strong>&lt;/td>
&lt;td>配置包来源：从 kubeclipper.io 下载。&lt;br />镜像拉取方式：镜像默认从官方镜像仓库拉取，如 kubernetes 镜像从 k8s.gcr.io 拉取、calico 从 docker.io 拉取。如果您设置了国内镜像代理，镜像会从您指定的 “KC_IMAGE_REPO_MIRROR” 代理仓库拉取。&lt;/td>
&lt;td>配置包来源：从 kubeclipper.io 下载。&lt;br />镜像拉取方式：从填写的镜像仓库拉取，组件将默认继承该仓库地址，请确保该仓库存在相关组件镜像；组件也会提供独立的镜像仓库参数，设置后组件镜像从该地址拉取。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>离线（内网环境）&lt;/strong>&lt;/td>
&lt;td>配置包来源：从本地 kubeclipper 集群 server 节点下载，您可以使用 kcctl resource list 命令查看本地可用配置包，或使用 kcctl resource push 命令上传所需配置包。&lt;br />镜像拉取方式：从本地 kubeclipper 集群 server 节点下载，下载后由 CRI 进行镜像导入。您可以使用 kcctl resource list 命令查看本地可用镜像包，或使用 kcctl resource push 命令上传所需镜像包。&lt;/td>
&lt;td>配置包来源：从本地下载，您可以使用 kcctl resource list 命令查看本地可用配置包，或使用 kcctl resource push 命令上传所需配置包。&lt;br />镜像拉取方式：从填写的镜像仓库拉取，组件将默认继承该仓库地址，请确保该仓库存在相关组件镜像；组件也会提供独立的镜像仓库参数，设置后组件镜像从该地址拉取。kubeclipper 提供 Docker Registry 方案，并使用 kcctl registry 命令行进行管理，您也可以使用其他自有镜像仓库。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>kubernetes 版本：指定集群 kubernetes 版本。当您选择离线安装的时候，可以从当前环境中配置包的 kubernetes 版本中选择；当您选择在线安装的时候，可以从 kubeclipper 官方推荐的版本中选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ETCD 数据目录：可指定 ETCD 数据目录，默认为/var/lib/etcd。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubelet 数据目录：可指定 kubelet 数据目录，默认为 /var/lib/kubelet。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CertSANs：kubernetes 集群 ca 证书签名的 ip 或者域名，可填写多个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器运行时：根据指定 kubernetes 版本，kubernetes 版本在 v1.20.0 之前，容器运行时默认 docker，之后默认 containerd；v1.24.0 之后不支持 docker。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器运行时版本：指定 containerd / docker 版本。与 kubernetes 相同，当您选择离线安装的时候，可以从当前环境中配置包的版本中选择；当您选择在线安装的时候，可以从 kubeclipper 官方推荐的版本中选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Containerd 数据目录：可填写 config.toml 配置中的 root dir，默认为/var/lib/containerd。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker 数据目录：可填写 daemon.json 配置中的 root dir，默认为/var/lib/docker。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Containerd 镜像仓库：存放 containerd 镜像的仓库地址，config.toml 配置中的 registry.mirrors，可填写多个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker 镜像仓库：存放 docker 镜像的仓库地址，daemon.json 配置中的 insecure registry,可填写多个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DNS 域名：kubernetes 集群的域名，默认为 cluster.local。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Worker 负载 IP：用于 worker 节点到多 master 的负载均衡，单一 master 不需要设置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>外部访问 IP：可以填写一个浮动 IP 给用户访问，可为空。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>备份空间：集群备份文件存储位置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cni-配置">CNI 配置&lt;/h3>
&lt;p>当前版本仅支持 Calico 作为集群 CNI。&lt;/p>
&lt;p>Calico 将用户设置的 pod cidr 分为若干个 block (网段)，根据业务需求动态的分配给需要的节点，并在节点中通过 bgp peer 维护集群节点的路由表。&lt;/p>
&lt;p>例如：容器的地址池：172.25.0.0/16，动态分配的网段池: 172.25.0.0 - 172.25.255.192 (172.25.0.0/26 即 10 个比特位)，动态分配的网段数: 1023，每个网段的 pod 数量为: 61 (193-254)，总 pod 数量为1023 * 61 = 62403，相对最大节点数(按照200业务 pod 为基准值)：312。&lt;/p>
&lt;p>目前不建议大于50个节点的集群，大于50个节点的集群建议手动配置 route reflection，用来优化集群中的节点的路由表维护的稳定性。&lt;/p>
&lt;p>使用 Calico 作为集群 CNI，您需要进行以下配置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Calico 模式：支持5种网络模式：&lt;/p>
&lt;ul>
&lt;li>Overlay-IPIP-All: 使用 IP-in-IP 技术打通不同节点的 pod 的网络,通常这样的方式使用在底层平台是 iaas 的环境之中,当然如果你底层网路环境直接是物理设备的也完全可以使用只不过效率和灵活度都会大打折扣,需要注意的是你需要确认底层网络环境(underlay)是支持 IPIP 协议的.(使用 overlay 的网络方式对网络性能造成一定的影响)。&lt;/li>
&lt;li>Overlay-Vxlan-All: 使用 IP-in-IP 技术打通不同节点的 pod 的网络,通常这样的方式使用在底层平台是 iaas 的环境之中,当然如果你底层网路环境直接是物理设备的也完全可以使用只不过效率和灵活度都会大打折扣,他理论上可以在任何的网络环境上运行,通常在底层环境不支持 IPIP 协议的时候我们会使用他.(使用 overlay 的网络方式对网络性能造成一定的影响)。&lt;/li>
&lt;li>BGP: 使用 IP-in-IP 技术打通不同节点的 pod 的网络,通常这样的方式使用在裸机的环境上,当然底 Iaas 平台支持 BGP 的话也是可以使用的,这种模式下 pod 的 ip 通信是通过 集群中的各个节点中互相交换路由表来完成 pod 之间的通信的,如果你需要手动打通多个集群之间的 pod 网络需要注意你分配的地址断不应该有冲突。&lt;/li>
&lt;li>Overaly-IPIP-Cross-Subnet: 使用 IP-in-IP 技术打通不同节点的 pod 的网络,通常这样的方式使用在底层平台是 iaas 的环境之中,需要注意的是你需要确认底层网络环境(underlay)是支持 IPIP 协议的.和 Overlay-IPIP-All 的不同之处在于,如果 2 个不同节点但在同一个网段中的上 pod 互相通信时是通过路由表,这样可以提高在不同节点但在同一个网段中的上 pod 互相通信时的效率。&lt;/li>
&lt;li>Overaly-Vxlan-Cross-Subnet: 和 Overaly-IPIP-Cross-Subnet 逻辑相似不再做重复的解释。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Calico 版本：指定 calico 版本。与 kubernetes 相同，当您选择离线安装的时候，可以从当前环境中配置包的版本中选择；当您选择在线安装的时候，可以从 kubeclipper 官方推荐的版本中选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IP版本：可指定 IP 版本为 IPV4 或 IPV4 IPV6 双栈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务子网：填写 service 子网 CIDR，v4 默认为：10.96.0.0/16，v6 默认为 fd03::/112，注意 Service 网络不得与任何主机网络重叠。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pod CIDR：填写 Pod 子网 CIDR，v4 默认：172.25.0.0/24，v6 默认为 fd05::/120，注意 Pod 网络不得与任何主机网络重叠。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pod网路的底层：&lt;/p>
&lt;ul>
&lt;li>first-found（默认）：程序会根据 ipfamily (v4 或 v6)遍历所有的有效的 ip 地址（local,loop back，docker bridge等会被自动排除）通常如果是多网卡时会排除默认网关以外的网卡的 ip 作为节点之间的路由地址。&lt;/li>
&lt;li>can-reach：通过检查域名或者 ip 的可达性来设置节点之间的路由地址。&lt;/li>
&lt;li>interface：根据正则表达式获取所有满足的网卡设备名称并返回第一个满足表达式网卡的地址作为节点之间的路由地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>MTU：为 Calico 环境配置最大传输单元(MTU)，建议不大于1440，默认为1440，详情见 &lt;a href="https://docs.projectcalico.org/networking/mtu">https://docs.projectcalico.org/networking/mtu&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="存储配置">存储配置&lt;/h3>
&lt;p>Kubeclipper当前版本内置了 NFS 作为集群外接存储。&lt;/p>
&lt;p>对接 NFS 类型的外接存储，您需要设置以下内容：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段&lt;/th>
&lt;th>作用说明&lt;/th>
&lt;th>填写说明/可选项&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>服务地址&lt;/strong>&lt;/td>
&lt;td>ServerAddr，NFS的服务地址&lt;/td>
&lt;td>必填&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>共享路径&lt;/strong>&lt;/td>
&lt;td>SharedPath，NFS的服务挂载路径&lt;/td>
&lt;td>必填&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>存储类&lt;/strong>&lt;/td>
&lt;td>StorageClassName，存储类的名称&lt;/td>
&lt;td>默认为 nfs-sc，可自定义名称，不可与集群其他存储类重复&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>回收策略&lt;/strong>&lt;/td>
&lt;td>ReclaimPolicy，VPC回收策略&lt;/td>
&lt;td>删除 Delete / 保留 Retain&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>挂载选项&lt;/strong>&lt;/td>
&lt;td>MountOptions，NFS 的 options 参数，如nfsvers=3&lt;/td>
&lt;td>选填，可填写多个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>副本数&lt;/strong>&lt;/td>
&lt;td>Replicas，NFS provisioner副本数&lt;/td>
&lt;td>默认为1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>设置完外接存储后，下方卡片会显示您已经开启的存储，您可以选择一个存储类作为默认存储，对于未指定特定StorageClass 的 PVC ，会直接使用默认的存储类。&lt;/p>
&lt;h3 id="配置确认">配置确认&lt;/h3>
&lt;p>您可以在配置确认页面浏览集群的配置信息，确认无误后，点击“确认“按钮。也可以点击卡片右侧的“编辑”按钮，跳回到相应步骤修改集群信息。&lt;/p>
&lt;p>安装集群可能需要较长时间，您可以在集群详情页面查看操作日志，跟踪集群安装状态。&lt;/p>
&lt;h3 id="设置国内镜像代理可选">设置国内镜像代理（可选）&lt;/h3>
&lt;blockquote>
&lt;p>Q: 设置国内镜像代理有什么作用？&lt;/p>
&lt;p>A: 设置了国内镜像代理，使用在线安装功能时，会从指定代理拉取 kubernetes 相关镜像，避免在国内无法访问 gcr 而导致集群安装失败问题。&lt;/p>
&lt;/blockquote>
&lt;p>以下设置方法需在执行 &lt;code>kcctl deploy&lt;/code> 部署命令的机器上完成，任选其一即可。&lt;/p>
&lt;p>**方式一：**设置 KC_IMAGE_REPO_MIRROR 环境变量（推荐）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 设置环境变量，推荐使用阿里云镜像代理，您也可以自行设定&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">KC_IMAGE_REPO_MIRROR&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;registry.aliyuncs.com/google_containers&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>**方式二：**设置 /etc/kc/kc.env 环境变量文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 创建 kc 目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -pv /etc/kc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 创建 kc.env 文件并传入环境变量信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/kc/kc.env
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">KC_IMAGE_REPO_MIRROR=&amp;#34;registry.aliyuncs.com/google_containers&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 部署 AIO</title><link>https://www.kubeclipper.io/docs/getting-started/aio-env/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/getting-started/aio-env/</guid><description>
&lt;p>对于初次接触 KubeClipper 并想快速上手的用户，建议使用 AIO（即 All-in-One，使用单个节点安装 KubeClipper）模式，它能够帮助您零配置快速部署 KubeClipper。&lt;/p>
&lt;h2 id="部署-kubeclipper">部署 KubeClipper&lt;/h2>
&lt;h3 id="下载并安装-kcctl">下载并安装 kcctl&lt;/h3>
&lt;p>KubeClipper 提供了命令行工具🔧 kcctl 以简化运维工作，您可以直接使用以下命令下载最新版 kcctl：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 默认安装最新的发行版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> bash -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 安装指定版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">KC_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>v1.3.1 bash -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 如果您在中国， 您可以在安装时使用 cn 环境变量, 此时 KubeClipper 会使用 registry.aliyuncs.com/google_containers 代替 k8s.gcr.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">KC_REGION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cn bash -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>您也可以在 &lt;a href="https://github.com/kubeclipper/kubeclipper/releases">GitHub Release Page&lt;/a> 下载指定版本。&lt;/p>
&lt;/blockquote>
&lt;p>可以通过以下命令验证 kcctl 是否安装成功:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 如果一切顺利，您将看到 kcctl 版本信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="开始安装">开始安装&lt;/h3>
&lt;p>您可以使用 &lt;code>kcctl deploy&lt;/code> 快速安装部署 KubeClipper。kcctl 使用 SSH 访问最终部署 KubeClipper 的目标节点，因此需要您提供 SSH 访问凭证，传递凭证的方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Kcctl deploy &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--user &amp;lt;username&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--passwd &amp;lt;password&amp;gt; &lt;span style="color:#000;font-weight:bold">|&lt;/span> --pk-file &amp;lt;private key path&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 使用私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl deploy --user root --pk-file /root/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 使用密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl deploy --user root --passwd password
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 &lt;code>kcctl deploy&lt;/code> 命令 kcctl 将会检查您的安装环境，若满足条件将自动进入安装流程。若您看到如下 KubeClipper banner 后即表示安装成功。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> _ __ _ _____ _ _
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">| | / / | | / __ \ (_)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">| |/ / _ _| |__ ___| / \/ |_ _ __ _ __ ___ _ __
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">| \| | | | &amp;#39;_ \ / _ \ | | | | &amp;#39;_ \| &amp;#39;_ \ / _ \ &amp;#39;__|
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">| |\ \ |_| | |_) | __/ \__/\ | | |_) | |_) | __/ |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">\_| \_/\__,_|_.__/ \___|\____/_|_| .__/| .__/ \___|_|
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> | | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> |_| |_|
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>您也可以部署 master 版本的 KubeClipper，来体验最新的功能特性（master 版本没有经过严格验证，可能包含影响体验的未知错误）&lt;/p>
&lt;ol>
&lt;li>安装 master 版本 kcctl&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">KC_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>master bash -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>在安装服务器上设置环境变量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">KC_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>以 AIO 方式部署 KubeClipper&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="登录控制台">登录控制台&lt;/h3>
&lt;p>安装完成后，打开浏览器，访问 &lt;code>http://&amp;lt;kc-server ip address&amp;gt;&lt;/code> 即可进入 KubeClipper 控制台。(通常 kc-server ip 是您部署 kubeClipper 节点的 ip)&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/console-login.png" alt="console">&lt;/p>
&lt;p>您可以使用默认帐号密码 &lt;code>admin / Thinkbig1&lt;/code> 进行登录。&lt;/p>
&lt;blockquote>
&lt;p>您可能需要配置端口转发规则并在安全组中开放端口，以便外部用户访问控制台。&lt;/p>
&lt;/blockquote>
&lt;h2 id="创建-kubernetes-集群">创建 Kubernetes 集群&lt;/h2>
&lt;p>部署成功后您可以使用 &lt;strong>kcctl 工具&lt;/strong>或者通过&lt;strong>控制台&lt;/strong>创建 Kubernetes 集群。在本快速入门教程中使用 kcctl 工具进行创建。&lt;/p>
&lt;p>首先使用默认帐号密码进行登录获取 token，便于后续 kcctl 和 kc-server 进行交互。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl login -H https://&amp;lt;kc-server ip address&amp;gt;:8080 -u admin -p Thinkbig1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过以下命令创建 Kubernetes 集群:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">NODE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kcctl get node -o yaml&lt;span style="color:#000;font-weight:bold">|&lt;/span>grep ipv4DefaultIP:&lt;span style="color:#000;font-weight:bold">|&lt;/span>sed &lt;span style="color:#4e9a06">&amp;#39;s/ipv4DefaultIP: //&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl create cluster --master &lt;span style="color:#000">$NODE&lt;/span> --name demo --untaint-master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>大概 3 分钟左右即可完成集群创建,您可以使用以下命令查看集群状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl get cluster -o yaml&lt;span style="color:#000;font-weight:bold">|&lt;/span>grep status -A5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>您也可以进入控制台查看实时日志。&lt;/p>
&lt;/blockquote>
&lt;p>集群处于 Running 状态即表示集群安装完成,您可以使用 &lt;code>kubectl get cs&lt;/code> 命令来查看集群健康状况。&lt;/p></description></item><item><title>Docs: 部署高可用 KubeClipper</title><link>https://www.kubeclipper.io/docs/deployment-docs/ha-deploy/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/deployment-docs/ha-deploy/</guid><description>
&lt;blockquote>
&lt;p>对于初次接触 KubeClipper，建议部署 AIO 环境，快速上手体验 KubeClipper 提供的功能特性。
对于想将 KubeClipper 应用到生成环境，那么本文档或许对您有所帮助。&lt;/p>
&lt;/blockquote>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>根据 KubeClipper 架构设计可知，KubeClipper 有以下 4 个核心组件：&lt;/p>
&lt;ul>
&lt;li>kc-server：主要包括 APISERVER 、控制器、静态资源服务以及内置消息队列等，kc-server 通过消息队列（支持外置）与 kc-agent 通信；kc-server 之间无主从关系，且相互独立；通常部署在独立的节点，从而对外提供稳定可靠的服务。&lt;/li>
&lt;li>kc-agent：主要包括任务处理器，负责接收 kc-server 投递的任务，并反馈任务处理结果；通常部署在需要安装 kubernetes 的节点，是一个超轻量级的服务进程。&lt;/li>
&lt;li>kc-etcd：kc-server 的后端数据库，跟随 kc-server 部署在同一节点上。&lt;/li>
&lt;li>kc-dashboard：图形化管理界面，跟随 kc-server 部署在同一节点。
综上，我们将部署 kc-server 的节点称为 server，部署 kc-agent 的节点称为 agent。&lt;/li>
&lt;/ul>
&lt;p>那么部署高可用 KubeClipper 集群的关键点，就在于如何规划部署 server 节点同时保证 kc-etcd 的高可用。
通常来看，对于部署高可用的分布式应用集群，基本建议节点至少 3 个；同样对于 KubeClipper，3 个节点能保证 kc-server 在其中 2 个节点宕机后依旧可以提供服务，同时能保证 kc-etcd 不会出现脑裂异常。&lt;/p>
&lt;blockquote>
&lt;p>以上简单介绍了 KubeClipper 架构以及核心组件，是为了更好的理解该如何部署高可用 KubeClipper 集群，从而引出关于对服务器节点规划以及硬件配置要求的思考。&lt;/p>
&lt;/blockquote>
&lt;h2 id="推荐配置">推荐配置&lt;/h2>
&lt;blockquote>
&lt;p>KubeClipper 作为一个极轻量的 Kubernetes 多集群全生命周期管理工具，本身不会占用太多资源&lt;/p>
&lt;/blockquote>
&lt;p>server 节点&lt;/p>
&lt;ul>
&lt;li>数量：3 个及以上&lt;/li>
&lt;li>硬件要求：CPU &amp;gt;= 2 核，内存 &amp;gt;= 2GB，硬盘 &amp;gt;= 20GB&lt;/li>
&lt;li>系统：CentOS 7.x / Ubuntu 18.04 / Ubuntu 20.04&lt;/li>
&lt;/ul>
&lt;p>agent 节点&lt;/p>
&lt;ul>
&lt;li>数量：任意&lt;/li>
&lt;li>硬件要求：依据实际需求而定&lt;/li>
&lt;li>系统：CentOS 7.x / Ubuntu 18.04 / Ubuntu 20.04&lt;/li>
&lt;/ul>
&lt;h2 id="从安装-kcctl-开始">从安装 kcctl 开始&lt;/h2>
&lt;blockquote>
&lt;p>kcctl 是 KubeClipper 提供的命令行工具，它支持快速部署 KubeClipper 集群以及大部分 Kuberneters 集群管理功能，用以简化运维工作。&lt;/p>
&lt;/blockquote>
&lt;p>安装 kcctl：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 默认安装最新发行版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> bash -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 安装指定版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">KC_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>v1.3.1 bash -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 如果您在中国，您可以在安装时指定 KC_REGION 环境变量，此时我们会使用 registry.aliyuncs.com/google_containers 代替 k8s.gcr.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 这对于在线安装 k8s 集群非常有用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">KC_REGION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cn bash -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装成功后，会输出安装版本以及安装路径等信息。&lt;/p>
&lt;blockquote>
&lt;p>您也可以在 &lt;a href="https://github.com/kubeclipper/kubeclipper/releases">GitHub Release Page&lt;/a> 下载指定的 kcctl 版本&lt;/p>
&lt;/blockquote>
&lt;p>验证安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl version -o json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl version:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;gitVersion&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;v1.3.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;gitCommit&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;5f19dcf78d3a9dc2d1035a779152fa993e0553df&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;gitTreeState&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;clean&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;buildDate&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;2022-12-02T10:12:36Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;goVersion&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;go1.19.2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;compiler&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;gc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#34;platform&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;linux/amd64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 查看帮助文档&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="了解-kcctl-deploy-命令">了解 kcctl deploy 命令&lt;/h2>
&lt;blockquote>
&lt;p>kcctl deploy 命令是专门用于部署 KubeClipper 集群，更多示例以及参数解释请执行 kcctl deploy -h&lt;/p>
&lt;/blockquote>
&lt;p>常用参数简介&lt;/p>
&lt;ul>
&lt;li>&amp;ndash;server: server 节点 IP，例如 192.168.10.10,192.168.10.11，多个 IP 以逗号隔开。&lt;/li>
&lt;li>&amp;ndash;agent: agent 节点 IP，例如 192.168.10.10,192.168.10.11，多个 IP 以逗号隔开。&lt;/li>
&lt;li>&amp;ndash;pk-file: ssh 免密登录私钥，推荐在命令行使用免密登录。&lt;/li>
&lt;li>&amp;ndash;user: ssh 登录用户名，默认为 root。&lt;/li>
&lt;li>&amp;ndash;passwd: ssh 登录密码，不推荐在命令行使用密码登录。&lt;/li>
&lt;li>&amp;ndash;pkg: 安装包路径，支持本地路径以及在线链接；获取在线安装包链接规则：https://oss.kubeclipper.io/release/{KC_VERSION}/kc-{GOARCH}.tar.gz 。KC_VERSION 为 Release Version 默认设置当前 kcctl 对应版本，GOARCH 为 amd64 或 arm64，默认设置当前 kcctl 的编译架构。&lt;/li>
&lt;li>&amp;ndash;ip-detect: 节点 ip 发现规则，支持多种规则，例如指定网卡名称等，对于多网卡节点非常有用，默认为 &amp;ldquo;first-found&amp;rdquo;。&lt;/li>
&lt;/ul>
&lt;p>了解完 kcctl deploy 的基础使用，那么接下来就开始部署 KubeClipper 集群吧。&lt;/p>
&lt;h2 id="使用-kcctl-部署-kubeclipper">使用 kcctl 部署 KubeClipper&lt;/h2>
&lt;blockquote>
&lt;p>我们推荐在多节点安装场景中，将涉及到的服务器节点都统一设置免密登录，避免密码明文泄露。&lt;/p>
&lt;/blockquote>
&lt;p>私钥方式部署 3 server 节点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl deploy --pk-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>~/.ssh/id_rsa &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--server SERVER_IPS &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--pkg https://oss.kubeclipper.io/release/&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>KC_VERSION&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>/kc-&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>GOARCH&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>私钥方式部署 3 server + 3 agent 节点，指定 pkg：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl deploy --pk-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>~/.ssh/id_rsa &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--server SERVER_IPS &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--agent AGENT_IPS &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--pkg https://oss.kubeclipper.io/release/&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>KC_VERSION&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>/kc-&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>GOARCH&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>私钥方式部署 3 server + 3 agent 节点，未指定 pkg，默认与 kcctl 安装版本一致（推荐）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl deploy --pk-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>~/.ssh/id_rsa &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--server SERVER_IPS &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--agent AGENT_IPS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>私钥方式部署 3 server + 3 agent 节点，指定 etcd 端口，默认端口为 client-12379 | peer-12380 | metrics-12381：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl deploy --pk-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>~/.ssh/id_rsa &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--server SERVER_IPS &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--agent AGENT_IPS &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>--etcd-port &lt;span style="color:#0000cf;font-weight:bold">12379&lt;/span> --etcd-peer-port &lt;span style="color:#0000cf;font-weight:bold">12380&lt;/span> --etcd-metric-port &lt;span style="color:#0000cf;font-weight:bold">12381&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>参数输入示例：&lt;br>
SERVER_IPS: 192.168.10.20,192.168.10.21&lt;br>
AGENT_IPS: 192.168.10.30,192.168.10.31&lt;br>
KC_VERSION: KubeClipper 的 release version，查看 &lt;a href="https://github.com/kubeclipper/kubeclipper/releases">GitHub Release Page&lt;/a> 获取&lt;br>
GOARCH：系统架构，amd64 （又名 x84_64），arm64（又名 aarch64）&lt;/p>
&lt;/blockquote>
&lt;p>kcctl deploy 支持多种参数，能够满足您对部署 KubeClipper 集群的特定需求，更多功能等您探索。&lt;br>
在执行 kcctl deploy 命令后，命令会检测您的环境是否符合安装要求，会将警告信息、安装进度等同步输出到控制台，最后在安装成功后会打印如下 KubeClipper banner：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> _ __ _ _____ _ _
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> / / &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> / __ &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>_&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/ / _ _&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>__ ___&lt;span style="color:#000;font-weight:bold">|&lt;/span> / &lt;span style="color:#4e9a06">\/&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>_ _ __ _ __ ___ _ __
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;_ \ / _ \ | | | | &amp;#39;&lt;/span>_ &lt;span style="color:#4e9a06">\|&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;_ \ / _ \ &amp;#39;&lt;/span>__&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#4e9a06">\ &lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> __/ &lt;span style="color:#4e9a06">\_&lt;/span>_/&lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> __/ &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">\_&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\_&lt;/span>/&lt;span style="color:#4e9a06">\_&lt;/span>_,_&lt;span style="color:#000;font-weight:bold">|&lt;/span>_.__/ &lt;span style="color:#4e9a06">\_&lt;/span>__&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#4e9a06">\_&lt;/span>___/_&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span> .__/&lt;span style="color:#000;font-weight:bold">|&lt;/span> .__/ &lt;span style="color:#4e9a06">\_&lt;/span>__&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>系统默认管理账号：&lt;code>admin / Thinkbig1&lt;/code>&lt;/p>
&lt;p>登录控制台：
打开浏览器，访问 &lt;code>http://SERVER_IP&lt;/code> （通过任意一个 Server 节点均可访问）即可进入 KubeClipper 控制台&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/console-login.png" alt="console">&lt;/p>
&lt;p>登录命令行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl login -H http://SERVER_IP -u admin -p Thinkbig1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>大多数 kcctl 命令都依赖登录状态，因此最好在执行 cli 命令时提前登录。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用-kcctl-添加-agent-节点到-kubeclipper">使用 kcctl 添加 agent 节点到 KubeClipper&lt;/h2>
&lt;blockquote>
&lt;p>当前 kcctl join 命令仅支持添加 agent 节点，后续会逐步支持添加 server 节点。
新加入的 agent 节点也应该统一设置免密登录，且私钥相同。&lt;/p>
&lt;/blockquote>
&lt;p>Join agent 节点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl join --agent&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>AGENT_IPS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-kcctl-从-kubeclipper-中删除-agent-节点">使用 kcctl 从 KubeClipper 中删除 agent 节点&lt;/h2>
&lt;blockquote>
&lt;p>当前 kcctl drain 命令仅支持删除 agent 节点，后续会逐步支持删除 server 节点。&lt;/p>
&lt;/blockquote>
&lt;p>Drain agent 节点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl drain --agent&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>AGENT_IPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 强制 drain 节点，忽略错误&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl drain --agent&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>AGENT_IPS --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您发现根据本文档无法成功部署 KubeClipper，请移步 &lt;a href="https://github.com/kubeclipper/kubeclipper/issues">KubeClipper Github Issue&lt;/a>，提出您的意见或反馈。&lt;/p></description></item><item><title>Docs: 集群托管</title><link>https://www.kubeclipper.io/docs/tutorials/cluster-hosting/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/tutorials/cluster-hosting/</guid><description>
&lt;h2 id="kubeadm-集群托管">Kubeadm 集群托管&lt;/h2>
&lt;p>托管由 kubeadm 创建和管理的 kubernetes 集群，kubeclipper 会通过 kubeconfig 文件，获取集群和节点信息，并导入到 kubeclipper 平台中。&lt;/p>
&lt;p>点击“集群管理”&amp;gt;“集群托管”按钮进入集群托管页面，点击左上角“添加”按钮，在添加提供商弹窗中，填写提供商名称（如 kubeadm-demo）和描述后，填写以下信息：&lt;/p>
&lt;ul>
&lt;li>区域：提供商下的集群和节点在 kubeclipper 平台中的所属区域。&lt;/li>
&lt;li>提供商类型：选择 kubeadm。&lt;/li>
&lt;li>节点连接方式：集群节点的连接方式，可以选择“私钥”或者“密码”，您需要确保可以通过所选方式 ssh 到集群节点。
&lt;ul>
&lt;li>选择“私钥”，需要输入节点用户名和私钥信息。&lt;/li>
&lt;li>选择“密码”，需要输入节点用户名和密码信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>集群名称：作为在本平台的展示名称，不能与其他集群重复。&lt;/li>
&lt;li>KubeConfig：托管集群的 KubeConfig 文件。&lt;/li>
&lt;/ul>
&lt;p>填写完成后点击“确定”按钮，将集群和节点导入到平台中。点击提供商名称（kubeadm-demo），进入提供商详情页，您可以查看提供商下的集群，并对提供商执行以下操作：&lt;/p>
&lt;ul>
&lt;li>同步：系统将每隔4小时定期同步集群信息，您也可以点击“同步”按钮手动执行。&lt;/li>
&lt;li>编辑：编辑提供商的名称、描述、访问信息、节点连接方式。&lt;/li>
&lt;li>移除：移除集群信息，但集群不会被卸载。&lt;/li>
&lt;/ul>
&lt;h2 id="托管集群管理">托管集群管理&lt;/h2>
&lt;p>您可以点击“集群管理”&amp;gt;“集群”进入集群列表页面，查看包括托管集群和本地集群在内的所有集群列表，对于不同集群，支持的管理操作如下表所示：&lt;/p>
&lt;p>注意：托管的 kubeadm 集群安装插件或外接存储的镜像来源会默认使用 docker.io，如果您处于离线环境，需要在安装插件时填写可访问的离线镜像仓库地址，该离线镜像仓库的地址需要预先添加到 cri 的私有镜像仓库配置，参见 &lt;a href="https://www.kubeclipper.io/docs/tutorials/cluster-management/#cri-%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE">CRI 镜像仓库配置&lt;/a> 。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>功能&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Kubeclipper 创建的集群&lt;/strong>&lt;/th>
&lt;th>&lt;strong>托管的 kubeadm 集群&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>查看日志&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>任务失败后重试&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>访问 kubectl&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>编辑&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>保存为模版&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CRI 镜像仓库配置&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>添加/移除集群节点&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>备份和恢复管理&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>版本升级&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>删除集群&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>移除集群（提供商）&lt;/td>
&lt;td>/&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重置状态&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>集群插件管理&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更新集群证书&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>查看 kubeconfig&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;td>✔︎&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: 使用 Kubeclipper 离线创建 kubernetes 集群</title><link>https://www.kubeclipper.io/docs/getting-started/carete-k8s-cluster-offline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/getting-started/carete-k8s-cluster-offline/</guid><description>
&lt;h2 id="1-进入创建界面">1. 进入创建界面&lt;/h2>
&lt;p>登录 Kubeclipper 平台后点击如图所示按钮，进入集群创建界面&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-begin.png" alt="">&lt;/p>
&lt;h2 id="2-配置集群节点">2. 配置集群节点&lt;/h2>
&lt;p>按照文字提示完成输入集群名称、选择节点等步骤&lt;/p>
&lt;p>注意: master 节点数量不能为偶数&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-node-config.png" alt="">&lt;/p>
&lt;h2 id="3-配置集群">3. 配置集群&lt;/h2>
&lt;p>此步骤用于配置集群网络以及数据库、容器运行时等组件&lt;/p>
&lt;p>选择离线安装并填写首先搭建好的镜像仓库地址&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-config.png" alt="">&lt;/p>
&lt;h2 id="4-配置存储">4. 配置存储&lt;/h2>
&lt;p>选择 nfs 存储，按照文字提示填写相应内容&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-storage-config.png" alt="">&lt;/p>
&lt;h2 id="5-安装完成">5. 安装完成&lt;/h2>
&lt;p>完成所有配置确认安装&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-finish.png" alt="">&lt;/p>
&lt;p>安装成功，集群正常运行&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-successful.png" alt="">&lt;/p></description></item><item><title>Docs: 制作 K8S 组件离线安装包</title><link>https://www.kubeclipper.io/docs/getting-started/make-offline-package/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/getting-started/make-offline-package/</guid><description>
&lt;p>本文档介绍如何制作 K8S 组件离线安装包，对于没有外网的环境，可以通过离线安装包进行安装。&lt;/p>
&lt;p>当前 kubeclipper v1.4 版本离线部署包中仅包含以下 K8S 组件：&lt;/p>
&lt;ul>
&lt;li>k8s: v1.27.4&lt;/li>
&lt;li>containerd: 1.6.4&lt;/li>
&lt;li>calico: v3.26.1&lt;/li>
&lt;/ul>
&lt;p>对于有特殊需求的用户，可以通过本文档介绍的方法自行制作离线组件包，然后在 kubeclipper 中使用。&lt;/p>
&lt;h2 id="1-准备工作">1. 准备工作&lt;/h2>
&lt;p>按照 &lt;a href="https://github.com/kubeclipper/kubeclipper">文档&lt;/a> 部署好 kubeclipper，确保 &lt;code>kcctl&lt;/code> 命令可以正常使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下操作均在 kubeclipper 部署节点上执行，使用 &lt;code>kcctl resource&lt;/code> 命令进行组件包上传。&lt;/p>
&lt;h2 id="2-确认组件版本">2. 确认组件版本&lt;/h2>
&lt;p>根据以下两个表格信息，确认需要制作的组件包版本，使用推送脚本或者手动上传组件包到 kubeclipper。&lt;/p>
&lt;p>&lt;code>k8s 组件包表&lt;/code> 记录当前对象存储里已制作好的各类组件包，后续我们将逐步开源更多组件包以及打包脚本。&lt;br>
&lt;code>k8s 版本与组件推荐版本对应关系表&lt;/code> 记录了各个 k8s 版本对应的组件版本，可以根据自己的需求选择对应的组件版本。&lt;/p>
&lt;h4 id="k8s-版本与组件推荐版本对应关系表">k8s 版本与组件推荐版本对应关系表&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">k8s 版本&lt;/th>
&lt;th style="text-align:left">containerd 版本&lt;/th>
&lt;th style="text-align:left">docker 版本&lt;/th>
&lt;th style="text-align:left">calico 版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">v1.33.0&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.31.1&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.30.6&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.29.4&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.28.0&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.27.4&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.26.7&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.25.4&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.24.8&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.23.9&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.23.6&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.22.12&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.21.14&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.20.15&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.16.10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.19.16&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.16.10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">v1.18.20&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;td style="text-align:left">v3.16.10&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="k8s-组件包表">k8s 组件包表&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">组件名称&lt;/th>
&lt;th style="text-align:left">版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.33.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.31.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.30.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.29.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.28.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.27.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.26.7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.25.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.24.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.23.9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.23.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.22.12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.21.14&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.20.15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.19.16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">k8s&lt;/td>
&lt;td style="text-align:left">v1.18.20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">containerd&lt;/td>
&lt;td style="text-align:left">1.6.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">docker&lt;/td>
&lt;td style="text-align:left">20.10.20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">calico&lt;/td>
&lt;td style="text-align:left">v3.26.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">calico&lt;/td>
&lt;td style="text-align:left">v3.22.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">calico&lt;/td>
&lt;td style="text-align:left">v3.21.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">calico&lt;/td>
&lt;td style="text-align:left">v3.16.10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">calico&lt;/td>
&lt;td style="text-align:left">v3.11.2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="3-推送离线组件包到-kubeclipper">3. 推送离线组件包到 kubeclipper&lt;/h2>
&lt;p>&lt;code>push_component.sh&lt;/code> 脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># usage: ./push_component.sh [component] [version] [arch]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># usage: ./push_component.sh k8s v1.23.9 amd64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">type&lt;/span> kcctl &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&amp;gt;/dev/null&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kcctl version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;kcctl command not found, please install it first!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PKG_URL_PREFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://oss.kubeclipper.io/packages&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;k8s&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;calico&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;containerd&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;docker&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;metallb&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;only &amp;#39;k8s&amp;#39;, &amp;#39;calico&amp;#39;,&amp;#39;containerd&amp;#39;,&amp;#39;docker&amp;#39;,&amp;#39;metallb&amp;#39; packages are supported. default: &lt;/span>&lt;span style="color:#000">$name&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> -z &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Please specify the package version!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;amd64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> !&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;arm64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;only &amp;#39;amd64&amp;#39;, &amp;#39;arm64&amp;#39; architectures are supported. default: &lt;/span>&lt;span style="color:#000">$arch&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">``&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">build_dir&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>-&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>-&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pkg_type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;k8s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>packaging&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#000">$name&lt;/span> in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k8s&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> images.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configs.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manifest.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pkg_type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;k8s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calico&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> images.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manifest.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#204a87">echo&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;3.26\n&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> sort -V &lt;span style="color:#000;font-weight:bold">|&lt;/span> tail -n 1&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> images.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> charts.tgz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manifest.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pkg_type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cni&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> containerd&lt;span style="color:#000;font-weight:bold">|&lt;/span>docker&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configs.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manifest.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pkg_type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;cri&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metallb&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> images.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manifest.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pkg_type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;metallb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">esac&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> file in &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">fileList&lt;/span>&lt;span style="color:#000;font-weight:bold">[@]&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;download &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wget &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PKG_URL_PREFIX&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">build_dir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> -P &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">build_dir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;packaging &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tar -zcvf &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">build_dir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;packaging &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> done&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;push &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> to kc...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kcctl resource push --pkg &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> --type &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_type&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;push &lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> to kc done&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>packaging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;clean up...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">build_dir&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">pkg_name&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;clean up done&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>push_component.sh&lt;/code> 脚本推送组件包到 kubeclipper：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chmod +x push_component.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 推送 k8s 组件包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./push_component.sh k8s v1.33.0 amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 推送 calico 组件包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./push_component.sh calico v3.26.1 amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 推送 containerd 组件包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./push_component.sh containerd 1.6.4 amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 推送 docker 组件包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./push_component.sh docker 20.10.20 amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 推送 metallb 组件包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./push_component.sh metallb v0.13.7 amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-查看离线组件包">4. 查看离线组件包&lt;/h2>
&lt;p>使用 &lt;code>kcctl resource list&lt;/code> 命令查看已上传的离线组件包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl resource list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-使用离线组件包">5. 使用离线组件包&lt;/h2>
&lt;p>登录 kubeclipper 控制台，点击&lt;code>创建集群&lt;/code>，进入&lt;code>集群配置&lt;/code>页，&lt;code>镜像类型&lt;/code>选择&lt;code>离线&lt;/code>，即可选择已上传的离线组件包。&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-config01.png" alt="集群配置01">
&lt;img src="https://www.kubeclipper.io/images/docs-quickstart/cluster-config02.png" alt="集群配置02">&lt;/p></description></item><item><title>Docs: 集群管理</title><link>https://www.kubeclipper.io/docs/tutorials/cluster-management/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/tutorials/cluster-management/</guid><description>
&lt;h2 id="集群操作日志查看">集群操作日志查看&lt;/h2>
&lt;p>在集群详情页面，点击“操作日志”标签页，可以查看集群操作日志列表。点击操作日志右侧“查看日志”按钮，可以在弹窗中查看全部步骤和节点的详细日志。点击左侧步骤名称，可查看执行步骤详细的日志输出。&lt;/p>
&lt;p>在集群操作执行过程中，点击查看日志，您可以实时查看到日志更新来跟踪操作执行情况。对于执行失败的任务，您也可以通过查看日志，找到红色圆点标注的执行步骤和节点，快速定位错误，排查操作失败原因。&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/log.png" alt="">&lt;/p>
&lt;h3 id="任务失败后重试">任务失败后重试&lt;/h3>
&lt;p>对于任务执行失败，但排查错误原因后不需要修改任务参数的情况，您可以点击操作日志右侧的“从断点处重试”按钮，从断点处重新执行任务。&lt;/p>
&lt;p>注意：重试操作并不是万能的，您需要自行判断任务执行失败的原因，处理后如果不需要更改执行任务时填写的参数，就可以点击重试按钮，从错误处重新开始执行。&lt;/p>
&lt;p>集群操作（如创建、恢复、升级等）执行失败，可能会导致集群状态显示为“xx失败”并无法正常执行其他操作，如果从断点处重试也无法执行成功，您可以参考运维文档，手动修复集群问题。问题修复后，您可以点击集群右侧“更多”&amp;gt;“集群状态”&amp;gt;“重置状态”按钮，重置集群至正常状态。&lt;/p>
&lt;h2 id="访问集群-kubectl">访问集群 kubectl&lt;/h2>
&lt;p>Kubectl 是 Kubernetes 命令行工具，您可以用它在 Kubernetes 集群上运行命令。Kubectl 可用于部署应用、查看和管理集群资源、查看日志等。&lt;/p>
&lt;p>您可以访问运行中集群的 kubectl，点击集群操作中的“更多“&amp;gt;”访问 kubectl”，就可以在集群 kuebectl 弹窗中执行 kubectl 命令行操作。&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/kubectl.png" alt="">&lt;/p>
&lt;h2 id="集群设置">集群设置&lt;/h2>
&lt;h3 id="编辑">编辑&lt;/h3>
&lt;p>您可以点击集群列表右侧“更多”&amp;gt;“集群设置”&amp;gt;“编辑”按钮，编辑集群描述、备份空间、外部访问 IP、集群标签信息。&lt;/p>
&lt;h3 id="保存为模版">保存为模版&lt;/h3>
&lt;p>您可以点击集群列表右侧“更多”&amp;gt;“集群设置”&amp;gt;“保存为模版”按钮，将集群信息保存为模版，以便再次创建相似配置的集群时使用。&lt;/p>
&lt;h3 id="cri-镜像仓库配置">CRI 镜像仓库配置&lt;/h3>
&lt;p>Docker 和 Containerd 使用 dockerhub 作为默认镜像仓库，如果您需要使用其他镜像仓库（特别是使用自签名 https 仓库或者 http 仓库），您需要配置 CRI 镜像仓库。&lt;/p>
&lt;p>点击集群右侧“更多”&amp;gt;“集群设置”&amp;gt;“CRI 镜像仓库”按钮，在 CRI 镜像仓库弹窗中，配置您需要的镜像仓库，您可以选择平台中已存在的镜像仓库，也可以临时填写镜像仓库地址。对于自签名 https 仓库或者 http 仓库，建议您先在“集群管理”&amp;gt;“镜像仓库”页面添加仓库信息，再在此操作中配置。&lt;/p>
&lt;h2 id="集群节点管理">集群节点管理&lt;/h2>
&lt;p>在集群详情页的“节点”列表页面，您可以查看当前集群中的节点列表，节点的规格、状态和角色信息。&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/cluster.png" alt="">&lt;/p>
&lt;h3 id="添加集群节点">添加集群节点&lt;/h3>
&lt;p>当集群负载较高时，您可以通过为集群添加节点来达到主动扩容的目的，添加新的“节点”不会影响现有的业务的运行。&lt;/p>
&lt;p>在集群详情页的节点列表标签页下，点击左侧的“添加节点”按钮，在弹窗中选择可用节点，设置节点标签，点击“确认”按钮。当前版本仅支持添加工作节点。&lt;/p>
&lt;h3 id="移除集群节点">移除集群节点&lt;/h3>
&lt;p>在集群详情页的节点列表标签页下，您可以点击节点右侧的 “移除”按钮移除节点。当前版本仅支持移除工作节点。&lt;/p>
&lt;p>注意：移除集群节点，您需要注意生产中的安全问题，避免应用发生中断。&lt;/p>
&lt;h2 id="集群备份和恢复">集群备份和恢复&lt;/h2>
&lt;p>KubeClipper 对 kubernetes 集群的备份主要为备份 ETCD 数据库数据，以及 kubernetes 的资源对象备份，如 namespace，deployment、configMap。对资源自身产生的文件和数据不做备份，例如对集群中运行的 mysql pod，该 mysql pod 产生的数据和文件，不会为之备份，同理，文件类的 pv 对象下的文件，也不做备份，仅仅备份 pv 这个对象。KubeClipper 提供的备份功能是热备份，备份期间不影响集群的使用。KubeClipper 虽然不反对在集群 &amp;ldquo;繁忙期&amp;rdquo; 备份，但也强烈不赞成在集群 &amp;ldquo;繁忙期&amp;rdquo; 备份。&lt;/p>
&lt;h3 id="创建备份空间">创建备份空间&lt;/h3>
&lt;p>执行备份之前，您需要先为集群设置备份空间，即设置备份文件的存储位置。备份空间的存储类型可以是 FS 存储或 S3 存储，下面以节点本地存储、NFS 存储和 MINIO 存储为例：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>节点本地存储（仅适用单节点实验集群）：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>创建存储目录。连接集群 master 节点终端（可参见&lt;a href="https://www.kubeclipper.io/docs/tutorials/node-management/#%E8%BF%9E%E6%8E%A5%E7%BB%88%E7%AB%AF">连接节点终端&lt;/a>），使用 mkdir 命令，在 master 节点中创建“/root/backup”目录。&lt;/li>
&lt;li>创建备份空间。点击“集群管理”&amp;gt;“备份空间”，进入备份空间列表页，点击右上角“创建”按钮，在创建备份空间弹窗中，输入“备份空间名称”，如 “local”，选择“存储类型”为 “FS”，填写“备份路径”，如 “/root/backup”。&lt;/li>
&lt;li>设置集群备份空间。创建集群时，在“集群配置”页面选择“备份空间”为 “local”，或者编辑已有集群，在编辑集群弹窗中的“备份空间”中选择 “local”。&lt;/li>
&lt;/ol>
&lt;p>注意：使用本地节点存储备份文件，不需要引入外部存储，缺点是如果本地节点遭到破坏，备份文件也会丢失，所以强烈不赞成在生产环境中使用。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NFS：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>准备 NFS 存储。准备一台 NFS 服务，并在 NFS 服务器上创建一个用于存放备份文件的目录，如 “/data/kubeclipper/cluster-backups”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>挂载存储目录。连接集群 master 节点终端（可参见&lt;a href="https://www.kubeclipper.io/docs/tutorials/node-management/#%E8%BF%9E%E6%8E%A5%E7%BB%88%E7%AB%AF">连接节点终端&lt;/a>），使用 mkdir 命令，在每个 master 节点中创建 “/data/kubeclipper/cluster-backups” 目录，并 mount 到 NFS 服务器的 /data/kubeclipper/cluster-backups 目录即可。&lt;/p>
&lt;p>命令示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mount -t nfs &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span> NFS_IP &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>:/data/kubeclipper/cluster-backups /opt/kubeclipper/cluster-backups -o &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>tcp -o nolock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建备份空间。点击“集群管理”&amp;gt;“备份空间”，进入备份空间列表页，点击右上角“创建”按钮，在创建备份空间弹窗中，输入“备份空间名称”，如 “nfs”，选择“存储类型”为 “FS”，填写“备份路径”为 “/opt/kubeclipper/cluster-backups”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置集群备份空间。创建集群时，在“集群配置”页面选择“备份空间”为 “nfs”，或者编辑已有集群，在编辑集群弹窗中的“备份空间”中选择 “nfs”。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>MINIO：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>准备 MINIO 存储。搭建 MINIO 服务，部署过程参考官网 &lt;a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html&lt;/a>，也可以使用已有 MINIO 服务。&lt;/li>
&lt;li>创建备份空间。点击“集群管理”&amp;gt;“备份空间”，进入备份空间列表页，点击右上角“创建”按钮，在创建备份空间弹窗中，输入“备份空间名称”，如 “minio”，选择“存储类型”为 “S3”，填写 “bucket 名称”，如 “kubeclipper-backups”，该 bucket 将由 kubeclipper 自动创建，“Endpoint” 中填写第一步 MINIO 存储服务的 ip 和端口号，填写服务用户名和密码，点击“确定”按钮。&lt;/li>
&lt;li>设置集群备份空间。创建集群时，在“集群配置”页面选择“备份空间”为 “minio”，或者编辑已有集群，在编辑集群弹窗中的“备份空间”中选择“minio”。&lt;/li>
&lt;/ol>
&lt;p>您可以在“集群管理”的“备份空间”页面查看所有备份空间列表和详细信息，并执行以下操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编辑：编辑备份空间描述，和 S3 类型备份空间的用户名/密码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除：删除备份空间，备份空间下存在备份文件的，不允许删除。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="集群备份">集群备份&lt;/h3>
&lt;p>您可以点击集群操作中的“更多”&amp;gt;“备份和恢复”&amp;gt; “集群备份”按钮，备份集群 ETCD 数据。&lt;/p>
&lt;p>您可以在集群详情页面的备份标签页下，查看当前集群的所有备份文件，还可以对备份执行以下操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编辑：编辑备份描述。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>恢复：执行集群恢复操作，将集群恢复至指定备份状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除：删除指定备份文件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="定时备份">定时备份&lt;/h3>
&lt;p>您也可以为集群创建定时备份，点击集群操作中的“更多”&amp;gt;“备份和恢复”&amp;gt; “定时备份”按钮，在定时备份弹窗中，输入定时备份名称、执行类型（重复执行/仅执行一次）和执行时间，并为重复执行的定时备份设置有效备份个数，点击“确认”按钮。&lt;/p>
&lt;p>kubeClipper 会在您设置的执行时间为集群执行备份任务，备份文件会自动命名为“集群名称-定时备份名称-随机码”，对于重复执行的定时备份，kubeClipper 会在该定时任务下的备份文件超过有效备份个数时，自动删除超出个数的较早的备份文件。&lt;/p>
&lt;p>定时备份添加完成后，可以在集群详情页的“定时备份”标签页查看定时备份信息，也可以在“备份”标签页查看定时备份产生的备份文件。&lt;/p>
&lt;p>对于定时备份任务，您还可以执行以下操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编辑：编辑定时备份任务执行时间，和重复执行的定时备份的有效备份个数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启用/禁用：禁用的定时备份任务将暂时停止执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除：删除定时备份任务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="集群备份恢复">集群备份恢复&lt;/h3>
&lt;p>如果您在集群正常运行期间执行恢复操作，则 KubeClipper 将对该集群进行覆盖式恢复，就是备份文件里面的 etcd 数据，覆盖现有的数据。&lt;/p>
&lt;p>您可以在集群详情页的备份标签页下，点击备份右侧的 “恢复”按钮；或点击集群操作中的“更多”&amp;gt;“备份和恢复”&amp;gt;“恢复集群”按钮，在恢复集群弹窗中选择需要恢复的备份，可以将当前集群恢复至指定备份状态。&lt;/p>
&lt;p>注意：集群升级后，将无法再恢复到升级前版本的备份。&lt;/p>
&lt;h2 id="集群状态">集群状态&lt;/h2>
&lt;h3 id="集群版本升级">集群版本升级&lt;/h3>
&lt;p>如当集群版本不满足需要，您可以为集群升级 kubernetes 版本。与创建集群一样，您需要准备好集群版本所需配置包和目标版本的 kubernetes 镜像并上传至指定位置，详情参见&lt;a href="https://www.kubeclipper.io/docs/tutorials/create-clusters/#%E5%88%9B%E5%BB%BA%E9%9B%86%E7%BE%A4%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">创建集群准备工作&lt;/a>。&lt;/p>
&lt;p>点击集群操作的“更多”&amp;gt;“集群状态”&amp;gt; “集群升级”按钮，在集群升级弹窗中选择安装方式和镜像仓库，选择升级的目标版本，升级的安装方式和 kubernetes 版本的配置与创建集群相同，详情参见&lt;a href="https://www.kubeclipper.io/docs/tutorials/create-clusters/#%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE">集群配置指南&lt;/a>。&lt;/p>
&lt;p>集群升级可以跨小版本，但不支持略过次版本的升级，如您可以从 v1.20.2 升级到 v1.20.13，或由 v1.20.x 升级到 v1.21.x，但不支持从 v1.20.x 升级到 v1.22.x。对于 1.23.x 版本，暂不支持升级到 1.24.x 版本。&lt;/p>
&lt;p>升级集群操作可能需要较长时间，您可以在集群详情页面查看操作日志，跟踪集群升级状态。&lt;/p>
&lt;h3 id="删除集群">删除集群&lt;/h3>
&lt;p>您可以点击集群列表右侧“更多”&amp;gt;“集群状态”&amp;gt; “删除”按钮，删除集群。&lt;/p>
&lt;p>注意删除后集群不可恢复。请谨慎操作。如果集群对接了外部存储，回收策略为“保留”的存储类中的数据卷会被保留，您可以通过其他方式访问，或手动删除；回收策略为“删除”的存储类中的数据卷，会在删除集群时自动删除。&lt;/p>
&lt;h3 id="重置状态">重置状态&lt;/h3>
&lt;p>集群操作（如创建、恢复、升级等）执行失败，可能会导致集群状态显示为“xx失败”并无法正常执行其他操作，如果从断点处重试也无法执行成功，您可以参考运维文档，手动修复集群问题。问题修复后，您可以点击集群右侧“更多”&amp;gt;“集群状态”&amp;gt;“重置状态”按钮，重置集群至正常状态。&lt;/p>
&lt;h2 id="集群插件管理">集群插件管理&lt;/h2>
&lt;p>除了在创建集群时安装插件，您也可以为运行中的集群安装存储和其他自定义插件。以安装存储插件为例，点击集群操作中的“更多”&amp;gt;“插件管理”&amp;gt;“添加存储项”按钮，进入添加存储项页面，可以为集群安装存储插件，安装配置与创建集群中的配置相同。&lt;/p>
&lt;p>对于已安装的插件，您可以在集群详情页查看插件信息，并执行以下操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>保存为模版：将插件信息保存为模版，以便为其他集群使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移除插件：卸载集群插件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="集群证书管理">集群证书管理&lt;/h2>
&lt;h3 id="更新集群证书">更新集群证书&lt;/h3>
&lt;p>kubernetes 集群证书默认有效期为一年，您可以在集群详情页的基本信息中查看证书过期时间，证书过期前一天，您也可以在集群列表看到证书过期的提醒。更新集群证书，您可以点击集群操作中的“更多”&amp;gt;“集群证书”&amp;gt;“更新集群证书”按钮，更新集群全部证书。&lt;/p>
&lt;h3 id="获取-kubeconfig-文件">获取 kubeconfig 文件&lt;/h3>
&lt;p>您可以点击集群操作中的“更多”&amp;gt;“集群证书”&amp;gt;“查看 kubeconfig 文件”按钮，查看集群 kubeconfig 文件，也可以点击弹窗中的“下载”按钮，下载 kubeconfig 文件。&lt;/p></description></item><item><title>Docs: 通过 kcctl 命令创建集群错误</title><link>https://www.kubeclipper.io/docs/faq/kcctl-create-cluster-error/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/faq/kcctl-create-cluster-error/</guid><description>
&lt;h2 id="问题复现">问题复现&lt;/h2>
&lt;p>安装 v1.2.1 版本的 kcctl&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -sfL https://oss.kubeclipper.io/get-kubeclipper.sh &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">KC_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>v1.2.1 bash -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 kcctl deploy 命令部署 KubeClipper 集群&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 安装 AIO 环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 kcctl create cluster 命令创建 kubernetes 集群&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 需要先登录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl login --host http://127.0.0.1 --username admin --password Thinkbig1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 创建集群&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl create cluster --name &lt;span style="color:#204a87">test&lt;/span> --master 192.168.10.98 --untaint-master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>登录 KubeClipper 管理界面，查看创建集群操作日志，日志显示在安装 cni 过程中发现下载 calico v3.21.2 404 无法找到&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-faq/create-cluster-error.png" alt="">&lt;/p>
&lt;h2 id="问题修复-pr">问题修复 PR&lt;/h2>
&lt;p>提交已经合并到了 master，PR：https://github.com/kubeclipper/kubeclipper/commit/7e6eb0ed199ff1cb00fde0c2624c62cdc5ca0b9c&lt;/p>
&lt;p>但 v1.2.1 已经发布了，按照发版规范无法在该版本打补丁，需要等到后续 v1.2.2 发布解决，因此我们提供一种临时方案来解决这个问题。&lt;/p>
&lt;h2 id="解决方法">解决方法&lt;/h2>
&lt;p>制作离线资源包
下载 calico v3.21.2 的安装包，打包为指定格式的离线资源包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 创建资源目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -pv calico/v3.21.2/amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 下载 v3.21.2 版本的 calico&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget -P calico/v3.21.2/amd64 https://oss.kubeclipper.io/packages/calico/v3.21.2/amd64/images.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget -P calico/v3.21.2/amd64 https://oss.kubeclipper.io/packages/calico/v3.21.2/amd64/manifest.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 压缩文件为指定命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -zcvf calico-v3.21.2-amd64.tar.gz calico
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>推送离线资源包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 推送&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl resource push --pkg calico-v3.21.2-amd64.tar.gz --type cni
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcctl resource list&lt;span style="color:#000;font-weight:bold">|&lt;/span>grep v3.21.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果在执行 &lt;code>kcctl resource push&lt;/code> 报了如下错误：
&lt;img src="https://www.kubeclipper.io/images/docs-faq/need-login.png" alt="">
解决方法如下：&lt;/p>
&lt;ol>
&lt;li>编辑 /root/.kc/deploy-config.yaml 文件。&lt;/li>
&lt;li>找到 ssh 配置项，添加 pkFile 字段配置，值为当前服务器的 ssh 公钥文件的绝对路径。&lt;br>
&lt;img src="https://www.kubeclipper.io/images/docs-faq/add-key.png" alt="">&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>通过命令行安装 kubernetes 集群，在 KubeClipper 管理后台查看操作日志&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kcctl create cluster --name &lt;span style="color:#204a87">test&lt;/span> --master 192.168.10.98 --untaint-master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 kubernetes 集群 pods 运行状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get pods -A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 节点管理</title><link>https://www.kubeclipper.io/docs/tutorials/node-management/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/tutorials/node-management/</guid><description>
&lt;h2 id="区域管理">区域管理&lt;/h2>
&lt;p>平台支持多区域管理，即为平台管理的所有节点和集群进行物理或逻辑的区域划分。您可以在“区域管理”页面查看平台内管理的所有区域，点击区域名称，进入区域详情页面，可以查看区域下的所有集群列表和节点列表。&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/region.png" alt="">&lt;/p>
&lt;h2 id="节点管理">节点管理&lt;/h2>
&lt;p>您可以在“节点信息”页面查看平台中管理的全部节点列表，和节点规格、状态等信息。点击节点名称进入节点详情页面，可以查看详细的节点基本信息和系统信息。&lt;/p>
&lt;p>KubeClipper 中的节点状态表示 kc-agent 对节点的管理状态。正常情况下，节点状态显示为“就绪”，当节点失联4分钟（误差时间 10s 内）后，状态会更新为“未知”，未知状态的节点无法进行任何操作，也无法创建集群或为集群添加/移除节点。&lt;/p>
&lt;h3 id="添加节点">添加节点&lt;/h3>
&lt;p>在部署 KubeClipper 时，您就可以添加初始的 server 节点和 agent 节点，其中，server 节点用于部署 KubeClipper 自身服务，agent 节点可用于部署 kubernetes 集群。在用于实验或开发的 KubeClipper 环境，您可以将 server 节点同时添加为 agent 节点。但如果用于生产环境，建议不要将 server 节点复用为 agent 节点。&lt;/p>
&lt;p>您也可以使用 kcctl join 命令为 KubeClipper 添加 agent 节点。同时，您可以为每个 agent 节点标记一个区域，区域可以是物理的或逻辑的位置，您可以使用同一区域的节点创建 kubernetes 集群，但不可以使用跨区域的节点创建集群。未标记区域的节点默认属于 default 区域。&lt;/p>
&lt;p>命令行示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kcctl join --agent beijing:1.2.3.4 --agent shanghai:2.3.4.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="移除节点">移除节点&lt;/h3>
&lt;p>当您不再需要某些节点，可以使用 kcctl drain 命令将节点从平台中移除。&lt;/p>
&lt;p>命令行示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kcctl drain --agent 192.168.10.19
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="连接终端">连接终端&lt;/h3>
&lt;p>在节点列表页面，您可以点击目标节点右侧的“连接终端”按钮，在连接终端的弹窗中输入节点端口和用户名密码信息后，访问节点 SSH 控制台并执行命令。&lt;/p>
&lt;h3 id="启用禁用节点">启用/禁用节点&lt;/h3>
&lt;p>您可以点击节点右侧“禁用”按钮暂时禁用节点，禁用状态下的节点不允许创建或添加到集群。&lt;/p></description></item><item><title>Docs: 访问控制</title><link>https://www.kubeclipper.io/docs/tutorials/access-control/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.kubeclipper.io/docs/tutorials/access-control/</guid><description>
&lt;h2 id="用户管理">用户管理&lt;/h2>
&lt;p>安装 KubeClipper 之后，您需要创建所需角色的用户。一开始，系统默认只有一个用户 admin，具有平台管理员角色。&lt;/p>
&lt;p>点击“访问控制”&amp;gt;“用户”，进入用户管理页面，点击左上角“创建用户”按钮，在弹窗中填写用户名、密码、手机号码、邮箱等信息，并指定用户角色，点击“确认”按钮。系统内置四个角色如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>平台管理员：拥有集群管理、用户管理、审计管理等全部平台查看和操作权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>集群管理员：拥有所有集群管理权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户管理员：拥有所有用户管理权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平台只读用户：拥有全部平台查看权限。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>用户创建完成后，您可以在用户详情页面查看用户详情信息，并执行以下操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编辑：编辑用户别名、角色、手机号、邮箱信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编辑密码：编辑用户登录密码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除：删除用户。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在用户详情页面，您还可以查看当前用户的登录日志列表。&lt;/p>
&lt;p>您可以编辑平台 /etc/kubeclipper-server/kubeclipper-server.yaml 文件，根据需要设置用户登录日志的最大保留条数和保留期限，每个用户的登录日志超过最大条数后，超过最大条数和期限的日志会被自动删除，仅超过保留期限但未超过最大条数的日志数据将不会被删除。&lt;/p>
&lt;h2 id="自定义角色">自定义角色&lt;/h2>
&lt;p>除了系统内置角色，您也可以创建自定义角色，以满足业务需要。&lt;/p>
&lt;p>点击“访问控制”&amp;gt;“角色”，进入角色管理页面，您可以点击左上角“创建角色”按钮，创建自定义角色。&lt;/p>
&lt;p>在创建角色页面，您需要填写角色名称和描述，并勾选自定义角色所需权限，一些权限依赖于其他权限，在选择这些权限时，将自动选中依赖的权限。&lt;/p>
&lt;p>创建自定义角色完成后，您可以在角色详情页面查看角色基本信息、角色权限列表、授权用户列表，并对自定义角色执行以下操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>编辑：编辑自定义角色别名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编辑权限：编辑自定义角色下的权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除：删除自定义角色，需确保没有用户使用待删除角色。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="接入外部用户">接入外部用户&lt;/h2>
&lt;p>KubeClipper 可以通过 OIDC 协议使用外部用户登录。&lt;/p>
&lt;p>首先，平台管理员需要登录平台 server 节点，在 kubeclipepr-server.yaml 文件中的 authentication 下插入以下信息：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-undefined" data-lang="undefined">oauthOptions:
identityProviders:
- name: keycloak
type: OIDC
mappingMethod: auto
provider:
clientID: kc
clientSecret: EErn729BB1bKawdRtnZgrqj9Bx0]mzUs
issuer: http://172.20.163.233:7777/auth/realms/kubeclipper
scopes:
- openid
- email
redirectURL: http://{kc-console-address}/oatuh2/redirect/{IDP-Name}
&lt;/code>&lt;/pre>&lt;p>其中，“provider” 下需要您填写自己的 OAuth2 服务的&lt;code>clientID&lt;/code>、&lt;code>clientSecret&lt;/code>、&lt;code>issuer&lt;/code>信息，以 keycloack 为例，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/keycloak-clients.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://www.kubeclipper.io/images/docs-tutorials/keycloak-secret.png" alt="">&lt;/p>
&lt;p>&lt;code>redirectURL&lt;/code>示例：http://172.0.0.90/oauth2/redirect/keycloack&lt;/p>
&lt;p>OAuth2 用户可以通过以下步骤访问和使用 KubeClipper 平台：&lt;/p>
&lt;ol>
&lt;li>点击登录页的 “OAuth2 登录”按钮，进入 OAuth2 登录页面，输入用户名密码登录，进入 KubeClipper 平台，首次登录，您会因未被授予权限而无法访问平台。&lt;/li>
&lt;li>平台管理员或其他拥有用户管理权限的用户登录 KubeClipper，在用户管理页面，找到目标 OAuth2 用户，通过编辑用户指定用户角色。&lt;/li>
&lt;li>OAuth2 用户重复第一步，登录 KubeClipper，就可以正常访问平台并执行角色权限内操作。&lt;/li>
&lt;/ol></description></item></channel></rss>